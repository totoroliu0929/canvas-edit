{"remainingRequest":"C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\git\\workspace\\vue\\canvas-edit\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\git\\workspace\\vue\\canvas-edit\\src\\App.vue","mtime":1635393876007},{"path":"C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635392660698},{"path":"C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1635392656135},{"path":"C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635392660698},{"path":"C:\\git\\workspace\\vue\\canvas-edit\\node_modules\\vue-loader\\lib\\index.js","mtime":1635392645713}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}